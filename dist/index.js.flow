//@flow
import { type ReadOnlyMapIterator } from "lodash";
declare class NonEmpty<T> {
  0: T;
}
export type NonEmptyArray<T> = { ...Array<T>, ...NonEmpty<T> };
declare export function mkNonEmpty<T>(array: Array<T>): NonEmptyArray<T> | null;
declare export function mkNonEmptyFromJust<T>(
  array: Array<T>
): NonEmptyArray<T>;
declare export function mkNonEmptySingleton<T>(elem: T): NonEmptyArray<T>;
declare export function mkNonEmptyFromHead<T>(
  head: T,
  tail: Array<T>
): NonEmptyArray<T>;
declare export function mkNonEmptyFromLast<T>(
  init: Array<T>,
  last: T
): NonEmptyArray<T>;
declare export function mapOnNonEmpty<T, U>(
  nonEmpty: NonEmptyArray<T>,
  f: ReadOnlyMapIterator<T, U> | ReadOnlyMapIterator<T, U>
): NonEmptyArray<U>;
declare export function lastOnNonEmpty<T>(array: NonEmptyArray<T>): T;
declare export function headOnNonEmpty<T>(array: NonEmptyArray<T>): T;
declare export function tailOnNonEmpty<T>(array: NonEmptyArray<T>): Array<T>;
declare export function initOnNonEmpty<T>(array: NonEmptyArray<T>): Array<T>;
declare export function nonEmptyToArray<T>(array: NonEmptyArray<T>): Array<T>;
declare export function unconsOnNonEmpty<T>(
  array: NonEmptyArray<T>
): [T, Array<T>];
declare export function flattenOnNonEmpty<T>(
  array: NonEmptyArray<NonEmptyArray<T>>
): NonEmptyArray<T>;
declare export function groupAllWith<A, B>(
  key: (a: A) => B,
  array: Array<A>
): Array<NonEmptyArray<A>>;
declare var _default: {
  mkNonEmpty: typeof mkNonEmpty,
  mkNonEmptySingleton: typeof mkNonEmptySingleton,
  mkNonEmptyFromHead: typeof mkNonEmptyFromHead,
  mkNonEmptyFromLast: typeof mkNonEmptyFromLast,
  lastOnNonEmpty: typeof lastOnNonEmpty,
  headOnNonEmpty: typeof headOnNonEmpty,
  tailOnNonEmpty: typeof tailOnNonEmpty,
  unconsOnNonEmpty: typeof unconsOnNonEmpty,
  initOnNonEmpty: typeof initOnNonEmpty,
  nonEmptyToArray: typeof nonEmptyToArray,
  ...
};
declare export default typeof _default;
