/* @flow */
import first from 'lodash/first';
import last from 'lodash/last';
import map from 'lodash/map';
import flatten from 'lodash/flatten';
import { type ReadOnlyMapIterator } from 'lodash';
import { fromJust } from '@freckle/maybe';
declare class NonEmpty {}
export type NonEmptyArray<T> = Array<T> & NonEmpty;
declare export function mkNonEmpty<T>(array: Array<T>): ?NonEmptyArray<T>;
declare export function mkNonEmptyFromJust<T>(array: Array<T>): NonEmptyArray<T>;
declare export function mkNonEmptySingleton<T>(elem: T): NonEmptyArray<T>;
declare export function mkNonEmptyFromHead<T>(head: T, tail: Array<T>): NonEmptyArray<T>;
declare export function mkNonEmptyFromLast<T>(init: Array<T>, last: T): NonEmptyArray<T>;
declare export function mapOnNonEmpty<T, U>(nonEmpty: NonEmptyArray<T>, f: ReadOnlyMapIterator<T, U>): NonEmptyArray<U>;
declare export function lastOnNonEmpty<T>(array: NonEmptyArray<T>): T;
declare export function headOnNonEmpty<T>(array: NonEmptyArray<T>): T;
declare export function tailOnNonEmpty<T>(array: NonEmptyArray<T>): Array<T>;
declare export function initOnNonEmpty<T>(array: NonEmptyArray<T>): Array<T>;
declare export function nonEmptyToArray<T>(array: NonEmptyArray<T>): Array<T>;
declare export function unconsOnNonEmpty<T>(array: NonEmptyArray<T>): [T, Array<T>];
declare export function flattenOnNonEmpty<T>(array: NonEmptyArray<NonEmptyArray<T>>): NonEmptyArray<T>;
export default {
  mkNonEmpty,
  mkNonEmptySingleton,
  mkNonEmptyFromHead,
  mkNonEmptyFromLast,
  lastOnNonEmpty,
  headOnNonEmpty,
  tailOnNonEmpty,
  unconsOnNonEmpty,
  initOnNonEmpty,
  nonEmptyToArray
};